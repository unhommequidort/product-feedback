generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [pgcrypto]
}

model Category {
  name                                 String     @id @db.VarChar(50)
  feedback_feedback_categoryTocategory Feedback[] @relation("feedback_categoryTocategory")

  @@map("category")
}

model Comment {
  id            String    @id @default(uuid()) @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  body          String    @db.VarChar
  createdBy     String    @map("created_by") @db.Uuid
  feedbackId    String    @map("feedback_id") @db.Uuid
  parentid      String?   @db.Uuid
  user          User      @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: NoAction)
  feedback      Feedback  @relation(fields: [feedbackId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  comment       Comment?  @relation("commentTocomment", fields: [parentid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_comment Comment[] @relation("commentTocomment")

  @@map("comment")
}

model Feedback {
  id                                   String    @id @default(uuid()) @db.Uuid
  createdAt                            DateTime  @default(now()) @map("created_at")
  updatedAt                            DateTime  @default(now()) @map("updated_at")
  createdBy                            String    @map("created_by") @db.Uuid
  title                                String    @db.VarChar(240)
  detail                               String    @db.VarChar
  category                             String    @db.VarChar(30)
  status                               String    @db.VarChar(30)
  comment                              Comment[]
  category_feedback_categoryTocategory Category  @relation("feedback_categoryTocategory", fields: [category], references: [name], onDelete: NoAction, onUpdate: NoAction)
  user                                 User      @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: NoAction)
  status_feedback_statusTostatus       Status    @relation("feedback_statusTostatus", fields: [status], references: [name], onDelete: NoAction, onUpdate: NoAction)
  upvote                               Upvote[]

  @@map("feedback")
}

model Status {
  name                             String     @id @db.VarChar(30)
  feedback_feedback_statusTostatus Feedback[] @relation("feedback_statusTostatus")

  @@map("status")
}

model Upvote {
  userId     String   @map("user_id") @db.Uuid
  feedbackId String   @map("feedback_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at")
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, feedbackId])
  @@map("upvote")
}

model User {
  id                 String        @id @default(uuid()) @db.Uuid
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @default(now()) @map("updated_at")
  username           String        @unique @db.VarChar(255)
  email              String        @unique @db.VarChar
  photo              String?       @default("default.png") @db.VarChar
  verified           Boolean?      @default(false)
  password           String        @db.VarChar
  role               RoleEnumType? @default(user)
  verificationCode   String?       @unique @map("verification_code") @db.VarChar
  name               String        @map("name") @db.VarChar(255)
  provider           String?
  passwordResetToken String?
  passwordResetAt    DateTime?
  comment            Comment[]
  feedback           Feedback[]
  upvote             Upvote[]

  @@unique([email, verificationCode, passwordResetToken])
  @@index([email, verificationCode, passwordResetToken])
  @@map("users")
}

enum RoleEnumType {
  user
  admin
}
